{"remainingRequest":"/Users/zoues/Code/projects/indagate/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zoues/Code/projects/indagate/ui/src/components/Dropzone/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zoues/Code/projects/indagate/ui/src/components/Dropzone/index.vue","mtime":1557709229084},{"path":"/Users/zoues/Code/projects/indagate/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zoues/Code/projects/indagate/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zoues/Code/projects/indagate/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zoues/Code/projects/indagate/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport Dropzone from 'dropzone'\nimport 'dropzone/dist/dropzone.css'\n// import { getToken } from 'api/qiniu';\n\nDropzone.autoDiscover = false\n\nexport default {\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    url: {\n      type: String,\n      required: true\n    },\n    clickable: {\n      type: Boolean,\n      default: true\n    },\n    defaultMsg: {\n      type: String,\n      default: '上传图片'\n    },\n    acceptedFiles: {\n      type: String,\n      default: ''\n    },\n    thumbnailHeight: {\n      type: Number,\n      default: 200\n    },\n    thumbnailWidth: {\n      type: Number,\n      default: 200\n    },\n    showRemoveLink: {\n      type: Boolean,\n      default: true\n    },\n    maxFilesize: {\n      type: Number,\n      default: 2\n    },\n    maxFiles: {\n      type: Number,\n      default: 3\n    },\n    autoProcessQueue: {\n      type: Boolean,\n      default: true\n    },\n    useCustomDropzoneOptions: {\n      type: Boolean,\n      default: false\n    },\n    defaultImg: {\n      default: '',\n      type: [String, Array]\n    },\n    couldPaste: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      dropzone: '',\n      initOnce: true\n    }\n  },\n  watch: {\n    defaultImg(val) {\n      if (val.length === 0) {\n        this.initOnce = false\n        return\n      }\n      if (!this.initOnce) return\n      this.initImages(val)\n      this.initOnce = false\n    }\n  },\n  mounted() {\n    const element = document.getElementById(this.id)\n    const vm = this\n    this.dropzone = new Dropzone(element, {\n      clickable: this.clickable,\n      thumbnailWidth: this.thumbnailWidth,\n      thumbnailHeight: this.thumbnailHeight,\n      maxFiles: this.maxFiles,\n      maxFilesize: this.maxFilesize,\n      dictRemoveFile: 'Remove',\n      addRemoveLinks: this.showRemoveLink,\n      acceptedFiles: this.acceptedFiles,\n      autoProcessQueue: this.autoProcessQueue,\n      dictDefaultMessage: '<i style=\"margin-top: 3em;display: inline-block\" class=\"material-icons\">' + this.defaultMsg + '</i><br>Drop files here to upload',\n      dictMaxFilesExceeded: '只能一个图',\n      previewTemplate: '<div class=\"dz-preview dz-file-preview\">  <div class=\"dz-image\" style=\"width:' + this.thumbnailWidth + 'px;height:' + this.thumbnailHeight + 'px\" ><img style=\"width:' + this.thumbnailWidth + 'px;height:' + this.thumbnailHeight + 'px\" data-dz-thumbnail /></div>  <div class=\"dz-details\"><div class=\"dz-size\"><span data-dz-size></span></div> <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>  <div class=\"dz-success-mark\"> <i class=\"material-icons\">done</i> </div>  <div class=\"dz-error-mark\"><i class=\"material-icons\">error</i></div></div>',\n      init() {\n        const val = vm.defaultImg\n        if (!val) return\n        if (Array.isArray(val)) {\n          if (val.length === 0) return\n          val.map((v, i) => {\n            const mockFile = { name: 'name' + i, size: 12345, url: v }\n            this.options.addedfile.call(this, mockFile)\n            this.options.thumbnail.call(this, mockFile, v)\n            mockFile.previewElement.classList.add('dz-success')\n            mockFile.previewElement.classList.add('dz-complete')\n            vm.initOnce = false\n            return true\n          })\n        } else {\n          const mockFile = { name: 'name', size: 12345, url: val }\n          this.options.addedfile.call(this, mockFile)\n          this.options.thumbnail.call(this, mockFile, val)\n          mockFile.previewElement.classList.add('dz-success')\n          mockFile.previewElement.classList.add('dz-complete')\n          vm.initOnce = false\n        }\n      },\n      accept: (file, done) => {\n        /* 七牛*/\n        // const token = this.$store.getters.token;\n        // getToken(token).then(response => {\n        //   file.token = response.data.qiniu_token;\n        //   file.key = response.data.qiniu_key;\n        //   file.url = response.data.qiniu_url;\n        //   done();\n        // })\n        done()\n      },\n      sending: (file, xhr, formData) => {\n        // formData.append('token', file.token);\n        // formData.append('key', file.key);\n        vm.initOnce = false\n      }\n    })\n\n    if (this.couldPaste) {\n      document.addEventListener('paste', this.pasteImg)\n    }\n\n    this.dropzone.on('success', file => {\n      vm.$emit('dropzone-success', file, vm.dropzone.element)\n    })\n    this.dropzone.on('addedfile', file => {\n      vm.$emit('dropzone-fileAdded', file)\n    })\n    this.dropzone.on('removedfile', file => {\n      vm.$emit('dropzone-removedFile', file)\n    })\n    this.dropzone.on('error', (file, error, xhr) => {\n      vm.$emit('dropzone-error', file, error, xhr)\n    })\n    this.dropzone.on('successmultiple', (file, error, xhr) => {\n      vm.$emit('dropzone-successmultiple', file, error, xhr)\n    })\n  },\n  destroyed() {\n    document.removeEventListener('paste', this.pasteImg)\n    this.dropzone.destroy()\n  },\n  methods: {\n    removeAllFiles() {\n      this.dropzone.removeAllFiles(true)\n    },\n    processQueue() {\n      this.dropzone.processQueue()\n    },\n    pasteImg(event) {\n      const items = (event.clipboardData || event.originalEvent.clipboardData).items\n      if (items[0].kind === 'file') {\n        this.dropzone.addFile(items[0].getAsFile())\n      }\n    },\n    initImages(val) {\n      if (!val) return\n      if (Array.isArray(val)) {\n        val.map((v, i) => {\n          const mockFile = { name: 'name' + i, size: 12345, url: v }\n          this.dropzone.options.addedfile.call(this.dropzone, mockFile)\n          this.dropzone.options.thumbnail.call(this.dropzone, mockFile, v)\n          mockFile.previewElement.classList.add('dz-success')\n          mockFile.previewElement.classList.add('dz-complete')\n          return true\n        })\n      } else {\n        const mockFile = { name: 'name', size: 12345, url: val }\n        this.dropzone.options.addedfile.call(this.dropzone, mockFile)\n        this.dropzone.options.thumbnail.call(this.dropzone, mockFile, val)\n        mockFile.previewElement.classList.add('dz-success')\n        mockFile.previewElement.classList.add('dz-complete')\n      }\n    }\n\n  }\n}\n",null]}