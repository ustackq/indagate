{"remainingRequest":"/Users/zoues/Code/projects/indagate/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zoues/Code/projects/indagate/ui/src/components/DndList/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zoues/Code/projects/indagate/ui/src/components/DndList/index.vue","mtime":1557709229084},{"path":"/Users/zoues/Code/projects/indagate/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zoues/Code/projects/indagate/ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zoues/Code/projects/indagate/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zoues/Code/projects/indagate/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport draggable from 'vuedraggable'\n\nexport default {\n  name: 'DndList',\n  components: { draggable },\n  props: {\n    list1: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    list2: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    list1Title: {\n      type: String,\n      default: 'list1'\n    },\n    list2Title: {\n      type: String,\n      default: 'list2'\n    },\n    width1: {\n      type: String,\n      default: '48%'\n    },\n    width2: {\n      type: String,\n      default: '48%'\n    }\n  },\n  methods: {\n    isNotInList1(v) {\n      return this.list1.every(k => v.id !== k.id)\n    },\n    isNotInList2(v) {\n      return this.list2.every(k => v.id !== k.id)\n    },\n    deleteEle(ele) {\n      for (const item of this.list1) {\n        if (item.id === ele.id) {\n          const index = this.list1.indexOf(item)\n          this.list1.splice(index, 1)\n          break\n        }\n      }\n      if (this.isNotInList2(ele)) {\n        this.list2.unshift(ele)\n      }\n    },\n    pushEle(ele) {\n      for (const item of this.list2) {\n        if (item.id === ele.id) {\n          const index = this.list2.indexOf(item)\n          this.list2.splice(index, 1)\n          break\n        }\n      }\n      if (this.isNotInList1(ele)) {\n        this.list1.push(ele)\n      }\n    },\n    setData(dataTransfer) {\n      // to avoid Firefox bug\n      // Detail see : https://github.com/RubaXa/Sortable/issues/1012\n      dataTransfer.setData('Text', '')\n    }\n  }\n}\n",null]}